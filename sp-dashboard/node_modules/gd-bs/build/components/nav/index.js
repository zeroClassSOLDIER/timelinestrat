"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nav = void 0;
var base_1 = require("../base");
var link_1 = require("./link");
var templates_1 = require("./templates");
/**
 * Navigation
 * @param props - The navigation properties.
 */
var _Nav = /** @class */ (function (_super) {
    __extends(_Nav, _super);
    // Constructor
    function _Nav(props, template, itemTemplate) {
        if (template === void 0) { template = props.isTabs ? (props.isVertical ? templates_1.HTMLVerticalTabs : templates_1.HTMLTabs) : templates_1.HTML; }
        var _this = _super.call(this, template, props) || this;
        _this._links = null;
        // Configure the collapse
        _this.configure(itemTemplate);
        // Configure the parent
        _this.configureParent();
        return _this;
    }
    // Configure the card group
    _Nav.prototype.configure = function (itemTemplate) {
        // Update the navigation
        var nav = this.el.querySelector(".nav");
        if (nav) {
            this.props.id ? nav.id = this.props.id : null;
            this.props.enableFill ? this.el.classList.add("nav-fill") : null;
            this.props.isJustified ? this.el.classList.add("nav-justified") : null;
            this.props.isPills ? this.el.classList.add("nav-pills") : null;
            this.props.isTabs ? this.el.classList.add("nav-tabs") : null;
            this.props.isVertical ? this.el.classList.add("flex-column") : null;
        }
        // Render the nav links
        this.renderItems(itemTemplate);
    };
    // Configures the link event
    _Nav.prototype.configureEvents = function (tab) {
        var _this = this;
        // Add a click event
        tab.el.addEventListener("click", function () {
            var prevTab = null;
            var newTab = tab;
            // Parse the links
            for (var i = 0; i < _this._links.length; i++) {
                var link = _this._links[i];
                // See if it's active
                if (link.isActive) {
                    // Set the old tab
                    prevTab = link;
                    // Toggle it
                    link.toggle(_this.props.fadeTabs);
                }
            }
            // Toggle the link
            tab.toggle(_this.props.fadeTabs);
            // Call the click event
            _this.props.onClick ? _this.props.onClick(newTab, prevTab) : null;
        });
    };
    // Renders the links
    _Nav.prototype.renderItems = function (itemTemplate) {
        // Clear the links
        this._links = [];
        // Get the nav and tab elements
        var nav = this.el.querySelector(".nav") || this.el;
        if (nav) {
            var tabs = this.el.querySelector(".tab-content");
            // Parse the navigation items
            var links = this.props.items || [];
            for (var i = 0; i < links.length; i++) {
                // Create the link
                var link = new link_1.NavLink(links[i], tabs ? true : false, itemTemplate);
                nav.appendChild(link.el);
                this._links.push(link);
                // See if we are rendering tabs
                if (tabs) {
                    // Configure the events
                    this.configureEvents(link);
                    // Add the tab content
                    tabs.appendChild(link.elTabContent);
                    // See if the fade option is enabled
                    if (this.props.fadeTabs) {
                        // Set the class name
                        link.elTabContent.classList.add("fade");
                        // See if the tab is active
                        if (link.props.isActive) {
                            // Set the class name
                            link.elTabContent.classList.add("show");
                        }
                    }
                }
                // Call the render events
                this.props.onLinkRendered ? this.props.onLinkRendered(link.elTab, links[i]) : null;
                this.props.onTabRendered ? this.props.onTabRendered(link.elTabContent, links[i]) : null;
            }
        }
    };
    Object.defineProperty(_Nav.prototype, "activeTab", {
        /**
         * Public Interface
         */
        // The active tab
        get: function () {
            // Parse the links
            for (var i = 0; i < this._links.length; i++) {
                var link = this._links[i];
                // See if it's active
                if (link.isActive) {
                    // Return the link
                    return link;
                }
            }
            // Active tab not found
            return null;
        },
        enumerable: false,
        configurable: true
    });
    // Shows a tab
    _Nav.prototype.showTab = function (tabId) {
        // Ensure tabs exist
        if (this.props.isTabs) {
            // Parse the tabs
            for (var i = 0; i < this._links.length; i++) {
                var link = this._links[i];
                // See if this is the target tab
                if (tabId === i + 1 || link.elTabContent.getAttribute("data-title") == tabId) {
                    // Toggle it if it's not active
                    link.isActive ? null : link.toggle(this.props.fadeTabs);
                }
                // Else, see if it's active
                else if (link.isActive) {
                    // Toggle it
                    link.toggle(this.props.fadeTabs);
                }
            }
        }
    };
    return _Nav;
}(base_1.Base));
exports.Nav = function (props, template, itemTemplate) { return new _Nav(props, template, itemTemplate); };
