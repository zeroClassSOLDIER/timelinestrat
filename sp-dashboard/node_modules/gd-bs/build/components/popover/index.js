"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Popover = exports.PopoverPlacements = exports.PopoverTypes = void 0;
var libs_1 = require("../../libs");
var button_1 = require("../button");
var base_1 = require("../base");
var common_1 = require("../common");
/**
 * Popover Types
 */
var PopoverTypes;
(function (PopoverTypes) {
    PopoverTypes[PopoverTypes["Light"] = 1] = "Light";
    PopoverTypes[PopoverTypes["LightBorder"] = 2] = "LightBorder";
    PopoverTypes[PopoverTypes["Material"] = 3] = "Material";
    PopoverTypes[PopoverTypes["Primary"] = 4] = "Primary";
    PopoverTypes[PopoverTypes["Secondary"] = 5] = "Secondary";
    PopoverTypes[PopoverTypes["Translucent"] = 6] = "Translucent";
})(PopoverTypes = exports.PopoverTypes || (exports.PopoverTypes = {}));
/**
 * Popover Placements
 */
var PopoverPlacements;
(function (PopoverPlacements) {
    PopoverPlacements[PopoverPlacements["Auto"] = 1] = "Auto";
    PopoverPlacements[PopoverPlacements["AutoStart"] = 2] = "AutoStart";
    PopoverPlacements[PopoverPlacements["AutoEnd"] = 3] = "AutoEnd";
    PopoverPlacements[PopoverPlacements["Bottom"] = 4] = "Bottom";
    PopoverPlacements[PopoverPlacements["BottomStart"] = 5] = "BottomStart";
    PopoverPlacements[PopoverPlacements["BottomEnd"] = 6] = "BottomEnd";
    PopoverPlacements[PopoverPlacements["Left"] = 7] = "Left";
    PopoverPlacements[PopoverPlacements["LeftStart"] = 8] = "LeftStart";
    PopoverPlacements[PopoverPlacements["LeftEnd"] = 9] = "LeftEnd";
    PopoverPlacements[PopoverPlacements["Right"] = 10] = "Right";
    PopoverPlacements[PopoverPlacements["RightStart"] = 11] = "RightStart";
    PopoverPlacements[PopoverPlacements["RightEnd"] = 12] = "RightEnd";
    PopoverPlacements[PopoverPlacements["Top"] = 13] = "Top";
    PopoverPlacements[PopoverPlacements["TopStart"] = 14] = "TopStart";
    PopoverPlacements[PopoverPlacements["TopEnd"] = 15] = "TopEnd";
})(PopoverPlacements = exports.PopoverPlacements || (exports.PopoverPlacements = {}));
/**
 * Popover
 */
var _Popover = /** @class */ (function (_super) {
    __extends(_Popover, _super);
    // Constructor
    function _Popover(props, template) {
        if (template === void 0) { template = ""; }
        var _this = _super.call(this, template, props) || this;
        _this._elContent = null;
        _this._tippy = null;
        // Configure the collapse
        _this.configure();
        // Configure the parent, if the target wasn't specified
        _this.props.target ? null : _this.configureParent();
        return _this;
    }
    // Configure the card group
    _Popover.prototype.configure = function () {
        var _this = this;
        // Set the placement
        var placement = null;
        switch (this.props.placement) {
            // Auto
            case PopoverPlacements.Auto:
                placement = "auto";
                break;
            case PopoverPlacements.AutoEnd:
                placement = "auto-end";
                break;
            case PopoverPlacements.AutoStart:
                placement = "auto-start";
                break;
            // Bottom
            case PopoverPlacements.Bottom:
                placement = "bottom";
                break;
            case PopoverPlacements.BottomEnd:
                placement = "bottom-end";
                break;
            case PopoverPlacements.BottomStart:
                placement = "bottom-start";
                break;
            // Left
            case PopoverPlacements.Left:
                placement = "left";
                break;
            case PopoverPlacements.LeftEnd:
                placement = "left-end";
                break;
            case PopoverPlacements.LeftStart:
                placement = "left-start";
                break;
            // Right
            case PopoverPlacements.Right:
                placement = "right";
                break;
            case PopoverPlacements.RightEnd:
                placement = "right-end";
                break;
            case PopoverPlacements.RightStart:
                placement = "right-start";
                break;
            // Top
            case PopoverPlacements.Top:
                placement = "top";
                break;
            case PopoverPlacements.TopEnd:
                placement = "top-end";
                break;
            case PopoverPlacements.TopStart:
                placement = "top-start";
                break;
            // Default - Auto
            default:
                placement = "top";
                break;
        }
        // Set the theme
        var theme = null;
        switch (this.props.type) {
            // Light
            case PopoverTypes.Light:
                theme = "light";
                break;
            case PopoverTypes.LightBorder:
                theme = "light-border";
                break;
            // Material
            case PopoverTypes.Material:
                theme = "material";
                break;
            // Primary
            case PopoverTypes.Primary:
                theme = "primary";
                break;
            // Secondary
            case PopoverTypes.Secondary:
                theme = "secondary";
                break;
            // Translucent
            case PopoverTypes.Translucent:
                theme = "translucent";
                break;
            // Default - Light Border
            default:
                theme = "light-border";
                break;
        }
        // Set the options
        var options = __assign({
            allowHTML: true,
            animation: "scale",
            arrow: true,
            delay: 100,
            inertia: true,
            interactive: true,
            placement: placement,
            theme: theme
        }, this.props.options);
        // See if we are targeting an element
        var elPopover = null;
        if (this.props.target) {
            // Set the popover to the target element
            elPopover = this.props.target;
            // Ensure the attributes are set in the target element
            elPopover.setAttribute("tabindex", "0");
            // Update this element
            this.el = elPopover;
        }
        else {
            // Create the button
            var btnProps = this.props.btnProps || {};
            btnProps.isLink = this.props.isDismissible ? true : false;
            btnProps.tabIndex = btnProps.tabIndex || 0;
            this.el = button_1.Button(btnProps).el;
        }
        // Create the popover content element
        this._elContent = document.createElement("div");
        this._elContent.classList.add("popover-content");
        this._elContent.innerHTML = '<h5 class="popover-header m-0"></h5><div class="popover-body"></div>';
        common_1.appendContent(this._elContent.querySelector(".popover-header"), this.props.title);
        common_1.appendContent(this._elContent.querySelector(".popover-body"), options.content);
        options.content = this._elContent;
        // Set the on create event
        options["onCreate"] = function (tippyObj) {
            // Get the content element
            var elContent = tippyObj.popper.querySelector(".tippy-content");
            if (elContent) {
                // Set the class
                elContent.classList.add("bs");
                // Set the styling
                elContent.style.padding = "0";
                // Get the custom class name(s)
                var custom = (_this.props.className || "").trim().split(" ");
                for (var i = 0; i < custom.length; i++) {
                    var className = custom[i];
                    // Add the custom class name
                    className ? elContent.classList.add(custom[i]) : null;
                }
            }
            // Call the custom event if it's defined
            _this.props.options && _this.props.options.onCreate ? _this.props.options.onCreate(tippyObj) : null;
        };
        // Create the tippy
        this._tippy = libs_1.tippy(this.el, options);
    };
    /**
     * Public Interface
     */
    // Disables the popover
    _Popover.prototype.disable = function () {
        // Disable the target element
        this.el.disabled = true;
    };
    // Enables the popover
    _Popover.prototype.enable = function () {
        // Enable the target element
        this.el.disabled = false;
    };
    // Hides the popover
    _Popover.prototype.hide = function () {
        // See if it's visible
        if (this.isVisible) {
            this._tippy.hide();
        }
    };
    Object.defineProperty(_Popover.prototype, "isVisible", {
        // Determines if the popover is visible
        get: function () { return this._tippy.state.isVisible; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Popover.prototype, "tippy", {
        // The tippy instance
        get: function () { return this._tippy; },
        enumerable: false,
        configurable: true
    });
    // Shows the popover
    _Popover.prototype.show = function () {
        // See if it's hidden
        if (!this.isVisible) {
            this._tippy.show();
        }
    };
    // Toggles the popover
    _Popover.prototype.toggle = function () {
        // Toggle the element
        if (this.isVisible) {
            // Hide the element
            this.hide();
        }
        else {
            // Show the element
            this.show();
        }
    };
    return _Popover;
}(base_1.Base));
exports.Popover = function (props, template) { return new _Popover(props, template); };
