"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = exports.TooltipPlacements = exports.TooltipTypes = void 0;
var libs_1 = require("../../libs");
var base_1 = require("../base");
var button_1 = require("../button");
var common_1 = require("../common");
/**
 * Tooltip Types
 */
var TooltipTypes;
(function (TooltipTypes) {
    TooltipTypes[TooltipTypes["Light"] = 1] = "Light";
    TooltipTypes[TooltipTypes["LightBorder"] = 2] = "LightBorder";
    TooltipTypes[TooltipTypes["Material"] = 3] = "Material";
    TooltipTypes[TooltipTypes["Primary"] = 4] = "Primary";
    TooltipTypes[TooltipTypes["Secondary"] = 5] = "Secondary";
    TooltipTypes[TooltipTypes["Translucent"] = 6] = "Translucent";
})(TooltipTypes = exports.TooltipTypes || (exports.TooltipTypes = {}));
/**
 * Tooltip Placements
 */
var TooltipPlacements;
(function (TooltipPlacements) {
    TooltipPlacements[TooltipPlacements["Auto"] = 1] = "Auto";
    TooltipPlacements[TooltipPlacements["AutoStart"] = 2] = "AutoStart";
    TooltipPlacements[TooltipPlacements["AutoEnd"] = 3] = "AutoEnd";
    TooltipPlacements[TooltipPlacements["Bottom"] = 4] = "Bottom";
    TooltipPlacements[TooltipPlacements["BottomStart"] = 5] = "BottomStart";
    TooltipPlacements[TooltipPlacements["BottomEnd"] = 6] = "BottomEnd";
    TooltipPlacements[TooltipPlacements["Left"] = 7] = "Left";
    TooltipPlacements[TooltipPlacements["LeftStart"] = 8] = "LeftStart";
    TooltipPlacements[TooltipPlacements["LeftEnd"] = 9] = "LeftEnd";
    TooltipPlacements[TooltipPlacements["Right"] = 10] = "Right";
    TooltipPlacements[TooltipPlacements["RightStart"] = 11] = "RightStart";
    TooltipPlacements[TooltipPlacements["RightEnd"] = 12] = "RightEnd";
    TooltipPlacements[TooltipPlacements["Top"] = 13] = "Top";
    TooltipPlacements[TooltipPlacements["TopStart"] = 14] = "TopStart";
    TooltipPlacements[TooltipPlacements["TopEnd"] = 15] = "TopEnd";
})(TooltipPlacements = exports.TooltipPlacements || (exports.TooltipPlacements = {}));
/**
 * Tooltip
 */
var _Tooltip = /** @class */ (function (_super) {
    __extends(_Tooltip, _super);
    // Constructor
    function _Tooltip(props, template) {
        if (template === void 0) { template = ""; }
        var _this = _super.call(this, template, props) || this;
        _this._btn = null;
        _this._elContent = null;
        _this._tippy = null;
        // Configure the collapse
        _this.configure();
        // Configure the parent
        _this.configureParent();
        return _this;
    }
    // Configure the tooltip
    _Tooltip.prototype.configure = function () {
        // See if the target element was not defined
        if (this.props.target == null) {
            // Default the toggle property for the button
            var btnProps = this.props.btnProps || {};
            btnProps.type = btnProps.type || button_1.ButtonTypes.OutlineSecondary;
            // Create the button
            this._btn = button_1.Button(btnProps);
            // Update the element
            this.el = this._btn.el;
        }
        // Configure the options
        this.configureOptions();
    };
    // Configure the options
    _Tooltip.prototype.configureOptions = function () {
        var _this = this;
        // Set the placement
        var placement = null;
        switch (this.props.placement) {
            // Auto
            case TooltipPlacements.Auto:
                placement = "auto";
                break;
            case TooltipPlacements.AutoEnd:
                placement = "auto-end";
                break;
            case TooltipPlacements.AutoStart:
                placement = "auto-start";
                break;
            // Bottom
            case TooltipPlacements.Bottom:
                placement = "bottom";
                break;
            case TooltipPlacements.BottomEnd:
                placement = "bottom-end";
                break;
            case TooltipPlacements.BottomStart:
                placement = "bottom-start";
                break;
            // Left
            case TooltipPlacements.Left:
                placement = "left";
                break;
            case TooltipPlacements.LeftEnd:
                placement = "left-end";
                break;
            case TooltipPlacements.LeftStart:
                placement = "left-start";
                break;
            // Right
            case TooltipPlacements.Right:
                placement = "right";
                break;
            case TooltipPlacements.RightEnd:
                placement = "right-end";
                break;
            case TooltipPlacements.RightStart:
                placement = "right-start";
                break;
            // Top
            case TooltipPlacements.Top:
                placement = "top";
                break;
            case TooltipPlacements.TopEnd:
                placement = "top-end";
                break;
            case TooltipPlacements.TopStart:
                placement = "top-start";
                break;
            // Default - Auto
            default:
                placement = "top";
                break;
        }
        // Set the theme
        var theme = null;
        switch (this.props.type) {
            // Light
            case TooltipTypes.Light:
                theme = "light";
                break;
            case TooltipTypes.LightBorder:
                theme = "light-border";
                break;
            // Material
            case TooltipTypes.Material:
                theme = "material";
                break;
            // Primary
            case TooltipTypes.Primary:
                theme = "primary";
                break;
            // Secondary
            case TooltipTypes.Secondary:
                theme = "secondary";
                break;
            // Translucent
            case TooltipTypes.Translucent:
                theme = "translucent";
                break;
            // Default - Secondary
            default:
                theme = "secondary";
                break;
        }
        // Set the options
        var options = __assign({
            allowHTML: false,
            animation: "scale",
            arrow: true,
            content: this.props.content,
            delay: 100,
            inertia: true,
            interactive: false,
            placement: placement,
            theme: theme
        }, this.props.options);
        // Create the popover content element
        this._elContent = document.createElement("div");
        this._elContent.classList.add("tooltip-content");
        common_1.appendContent(this._elContent, options.content);
        options.content = this._elContent;
        // Set the on create event
        options["onCreate"] = function (tippyObj) {
            // Get the content element
            var elContent = tippyObj.popper.querySelector(".tippy-content");
            if (elContent) {
                // Set the class
                elContent.classList.add("bs");
                // Get the custom class name(s)
                var custom = (_this.props.className || "").trim().split(" ");
                for (var i = 0; i < custom.length; i++) {
                    var className = custom[i];
                    // Add the custom class name
                    className ? elContent.classList.add(custom[i]) : null;
                }
            }
            // Call the custom event if it's defined
            _this.props.options && _this.props.options.onCreate ? _this.props.options.onCreate(tippyObj) : null;
        };
        // Create the tippy
        this._tippy = libs_1.tippy(this.props.target || this.el, options);
    };
    Object.defineProperty(_Tooltip.prototype, "button", {
        /**
         * Public Interface
         */
        // Reference to the button
        get: function () { return this._btn; },
        enumerable: false,
        configurable: true
    });
    // Disbles the tooltip
    _Tooltip.prototype.disable = function () {
        // Disable the button
        this._btn ? this._btn.disable() : null;
    };
    // Enables the tooltip
    _Tooltip.prototype.enable = function () {
        // Enable the button
        this._btn ? this._btn.enable() : null;
    };
    // Hides the popover
    _Tooltip.prototype.hide = function () {
        // See if it's visible
        if (this.isVisible) {
            this._tippy.hide();
        }
    };
    Object.defineProperty(_Tooltip.prototype, "isVisible", {
        // Determines if the popover is visible
        get: function () { return this._tippy.state.isVisible; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Tooltip.prototype, "tippy", {
        // The tippy instance
        get: function () { return this._tippy; },
        enumerable: false,
        configurable: true
    });
    // Shows the popover
    _Tooltip.prototype.show = function () {
        // See if it's hidden
        if (!this.isVisible) {
            this._tippy.show();
        }
    };
    // Toggles the tooltip
    _Tooltip.prototype.toggle = function () {
        // Toggle the element
        if (this.isVisible) {
            // Hide the element
            this.hide();
        }
        else {
            // Show the element
            this.show();
        }
    };
    return _Tooltip;
}(base_1.Base));
exports.Tooltip = function (props, template) { return new _Tooltip(props, template); };
