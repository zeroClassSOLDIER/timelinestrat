"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterSlideout = void 0;
var gd_sprest_bs_1 = require("gd-sprest-bs");
var canvas_1 = require("../common/canvas");
/**
 * Filter Slideout
 */
var FilterSlideout = /** @class */ (function () {
    function FilterSlideout(props) {
        this._cbs = null;
        this._el = null;
        this._filters = null;
        this._items = null;
        // Save the properties
        this._filters = props.filters || [];
        this._onClear = props.onClear;
        // Initialize the variables
        this._cbs = [];
        this._items = [];
        // Generate the items
        this.generateFilters();
        // Call the render event
        props.onRendered ? props.onRendered(this._el) : null;
    }
    // Generates the filters
    FilterSlideout.prototype.generateFilters = function () {
        var _this = this;
        // Create the filters element
        this._el = document.createElement("div");
        // Render a clear button
        gd_sprest_bs_1.Components.Button({
            el: this._el,
            className: "mb-3",
            text: "Clear Filters",
            type: gd_sprest_bs_1.Components.ButtonTypes.OutlineDanger,
            onClick: function () {
                // Parse the filters
                for (var i = 0; i < _this._cbs.length; i++) {
                    // Clear the filter
                    _this._cbs[i].setValue("");
                }
                // Execute the event
                _this._onClear ? _this._onClear() : null;
            }
        });
        // Parse the filters
        for (var i = 0; i < this._filters.length; i++) {
            var filter = this._filters[i];
            // Add the filter
            this._items.push(this.generateItem(filter));
        }
        // Default the first filter to be displayed
        this._items.length > 0 ? this._items[0].showFl = true : null;
        // Render an accordion
        gd_sprest_bs_1.Components.Accordion({
            el: this._el,
            items: this._items
        });
    };
    // Generates the navigation dropdown items
    FilterSlideout.prototype.generateItem = function (filter) {
        var _this = this;
        // Create the item
        var item = {
            header: filter.header,
            onRender: function (el) {
                // Render the checkbox group
                _this._cbs.push(gd_sprest_bs_1.Components.CheckboxGroup({
                    el: el,
                    items: filter.items,
                    multi: filter.multi,
                    type: gd_sprest_bs_1.Components.CheckboxGroupTypes.Switch,
                    onChange: function (value) {
                        // See if this is a single item
                        if (filter.multi) {
                            var values = [];
                            // Parse the items
                            var items = (value || []);
                            for (var i = 0; i < items.length; i++) {
                                // Append the value
                                values.push(items[i].label);
                            }
                            // Execute the event
                            filter.onFilter ? filter.onFilter(values) : null;
                        }
                        else {
                            var item_1 = value;
                            // Execute the event
                            filter.onFilter ? filter.onFilter(item_1 ? item_1.label : "") : null;
                        }
                    }
                }));
            }
        };
        // Return the item
        return item;
    };
    // Gets a checkbox group by its name
    FilterSlideout.prototype.getFilter = function (key) {
        // Parse the items
        for (var i = 0; i < this._items.length; i++) {
            var item = this._items[i];
            // See if this is the target
            if (item.header == key) {
                // Return the checkbox
                return this._cbs[i];
            }
        }
        // Not found
        return null;
    };
    // Sets a checkbox group filter
    FilterSlideout.prototype.setFilterValue = function (key, value) {
        // Get the filter
        var filter = this.getFilter(key);
        if (filter) {
            // Set the value
            filter.setValue(value);
        }
    };
    // Hides the filter
    FilterSlideout.prototype.hide = function () { canvas_1.CanvasForm.hide(); };
    // Shows the filters
    FilterSlideout.prototype.show = function () {
        // Set the header and body
        canvas_1.CanvasForm.setHeader('<h5 class="m-0">Filters</h5>');
        canvas_1.CanvasForm.setBody(this._el || "<p>Loading the Filters...</p>");
        // Show the filters
        canvas_1.CanvasForm.show();
    };
    return FilterSlideout;
}());
exports.FilterSlideout = FilterSlideout;
