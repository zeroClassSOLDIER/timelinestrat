"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dashboard = void 0;
var itemForm_1 = require("../itemForm");
var filter_1 = require("./filter");
var footer_1 = require("./footer");
var header_1 = require("./header");
var navigation_1 = require("./navigation");
var table_1 = require("./table");
// Export the components
__exportStar(require("./filter"), exports);
__exportStar(require("./footer"), exports);
__exportStar(require("./header"), exports);
__exportStar(require("./navigation"), exports);
__exportStar(require("./table"), exports);
/**
 * Dashboard
 */
var Dashboard = /** @class */ (function () {
    // Constructor
    function Dashboard(props) {
        this._dt = null;
        this._filters = null;
        this._props = null;
        // Set the properties
        this._props = props;
        // Set the flag
        typeof (props.useModal) === "boolean" ? itemForm_1.ItemForm.UseModal = props.useModal : null;
        // Render the dashboard
        this.render();
        // Call the render event
        props.onRendered ? props.onRendered(this._props.el) : null;
    }
    // Renders the component
    Dashboard.prototype.render = function () {
        var _this = this;
        // Create the filters
        this._filters = new filter_1.FilterSlideout({
            filters: this._props.filters ? this._props.filters.items : [],
            onClear: this._props.filters ? this._props.filters.onClear : null,
            onRendered: this._props.filters ? this._props.filters.onRendered : null
        });
        // Render the template
        var elTemplate = document.createElement("div");
        elTemplate.classList.add("dashboard");
        elTemplate.innerHTML = "\n        <div class=\"row\">\n            <div id=\"navigation\" class=\"col\"></div>\n        </div>\n        <div class=\"row\">\n            <div id=\"header\" class=\"col\"></div>\n        </div>\n        <div class=\"row\">\n            <div id=\"datatable\" class=\"col\"></div>\n        </div>\n        <div class=\"row\">\n            <div id=\"footer\" class=\"col\"></div>\n        </div>".trim();
        this._props.el.appendChild(elTemplate);
        // See if we are hiding the header
        if (this._props.hideHeader) {
            // Hide the element
            this._props.el.querySelector("#header").classList.add("d-none");
        }
        else {
            // Render the header
            var header = this._props.header || {};
            new header_1.Header({
                el: this._props.el.querySelector("#header"),
                onRendering: this._props.header ? this._props.header.onRendering : null,
                onRendered: this._props.header ? this._props.header.onRendered : null,
                title: header.title
            });
        }
        // See if we are hiding the navigation
        if (this._props.hideNavigation) {
            // Hide the element
            this._props.el.querySelector("#navigation").classList.add("d-none");
        }
        else {
            // Render the navigation
            var navigation = this._props.navigation || {};
            new navigation_1.Navigation({
                el: this._props.el.querySelector("#navigation"),
                hideFilter: this._props.hideFilter,
                items: navigation.items,
                itemsEnd: navigation.itemsEnd,
                title: navigation.title,
                onFilterRendered: navigation.onFilterRendered,
                onRendering: navigation.onRendering,
                onRendered: navigation.onRendered,
                onSearch: function (value) {
                    // Search the data table
                    _this._dt.search(value);
                },
                onShowFilter: function () {
                    // Show the filter
                    _this._filters.show();
                },
            });
        }
        // Render the data table
        this._dt = new table_1.DataTable({
            columns: this._props.table ? this._props.table.columns : null,
            dtProps: this._props.table ? this._props.table.dtProps : null,
            el: this._props.el.querySelector("#datatable"),
            onRendered: this._props.table ? this._props.table.onRendered : null,
            rows: this._props.table ? this._props.table.rows : null
        });
        // See if we are hiding the footer
        if (this._props.hideFooter) {
            // Hide the element
            this._props.el.querySelector("#footer").classList.add("d-none");
        }
        else {
            // Render the footer
            var footer = this._props.footer || {};
            new footer_1.Footer({
                el: this._props.el.querySelector("#footer"),
                items: footer.items,
                itemsEnd: footer.itemsEnd,
                onRendering: footer.onRendering,
                onRendered: footer.onRendered
            });
        }
    };
    /**
     * Public Interface
     */
    // Filter the table
    Dashboard.prototype.filter = function (idx, value) {
        // Filter the table
        this._dt.filter(idx, value);
    };
    // Returns a filter checkbox group by its key
    Dashboard.prototype.getFilter = function (key) { return this._filters.getFilter(key); };
    // Hides the filter
    Dashboard.prototype.hideFilter = function () { this._filters.hide(); };
    // Refresh the table
    Dashboard.prototype.refresh = function (rows) {
        // Refresh the table
        this._dt.refresh(rows);
    };
    // Search the table
    Dashboard.prototype.search = function (value) {
        // Search the table
        this._dt.search(value);
    };
    // Sets a filter checkbox group value
    Dashboard.prototype.setFilterValue = function (key, value) { return this._filters.setFilterValue(key, value); };
    // Shows the filter
    Dashboard.prototype.showFilter = function () { this._filters.show(); };
    return Dashboard;
}());
exports.Dashboard = Dashboard;
