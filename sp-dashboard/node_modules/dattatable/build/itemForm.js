"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemForm = void 0;
var gd_sprest_bs_1 = require("gd-sprest-bs");
var common_1 = require("./common");
/**
 * Item Form
 */
var ItemForm = /** @class */ (function () {
    function ItemForm() {
    }
    Object.defineProperty(ItemForm, "AutoClose", {
        // Auto Close Flag
        set: function (value) {
            // Update the flag
            this.UseModal ? common_1.Modal.setAutoClose(value) : common_1.CanvasForm.setAutoClose(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemForm, "DisplayForm", {
        get: function () { return this._displayForm; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemForm, "EditForm", {
        get: function () { return this._editForm; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemForm, "FormInfo", {
        get: function () { return this._info; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemForm, "IsDisplay", {
        get: function () { return this._controlMode == gd_sprest_bs_1.SPTypes.ControlMode.Display; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemForm, "IsEdit", {
        get: function () { return this._controlMode == gd_sprest_bs_1.SPTypes.ControlMode.Edit; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemForm, "IsNew", {
        get: function () { return this._controlMode == gd_sprest_bs_1.SPTypes.ControlMode.New; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemForm, "ListName", {
        get: function () { return this._listName; },
        set: function (value) { this._listName = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemForm, "UseModal", {
        get: function () { return this._useModal; },
        set: function (value) { this._useModal = value; },
        enumerable: false,
        configurable: true
    });
    /** Public Methods */
    // Closes the item form
    ItemForm.close = function () {
        this._useModal ? common_1.Modal.hide() : common_1.CanvasForm.hide();
    };
    // Creates a new task
    ItemForm.create = function (props) {
        if (props === void 0) { props = {}; }
        // Set the properties
        this._controlMode = gd_sprest_bs_1.SPTypes.ControlMode.New;
        this._onCreateEditForm = props.onCreateEditForm;
        this._onFormButtonsRendering = props.onFormButtonsRendering;
        this._onGetListInfo = props.onGetListInfo;
        this._onSave = props.onSave;
        this._onSetFooter = props.onSetFooter;
        this._onSetHeader = props.onSetHeader;
        this._onValidation = props.onValidation;
        this._updateEvent = props.onUpdate;
        typeof (props.useModal) === "boolean" ? this._useModal = props.useModal : false;
        // Load the item
        this.load();
    };
    // Edits a task
    ItemForm.edit = function (props) {
        // Set the properties
        this._controlMode = gd_sprest_bs_1.SPTypes.ControlMode.Edit;
        this._onCreateEditForm = props.onCreateEditForm;
        this._onFormButtonsRendering = props.onFormButtonsRendering;
        this._onGetListInfo = props.onGetListInfo;
        this._onSave = props.onSave;
        this._onSetFooter = props.onSetFooter;
        this._onSetHeader = props.onSetHeader;
        this._onValidation = props.onValidation;
        this._updateEvent = props.onUpdate;
        typeof (props.useModal) === "boolean" ? this._useModal = props.useModal : false;
        // Load the form
        this.load(props.itemId);
    };
    // Views the task
    ItemForm.view = function (props) {
        // Set the properties
        this._controlMode = gd_sprest_bs_1.SPTypes.ControlMode.Display;
        this._onCreateViewForm = props.onCreateViewForm;
        this._onFormButtonsRendering = props.onFormButtonsRendering;
        this._onGetListInfo = props.onGetListInfo;
        this._onSetFooter = props.onSetFooter;
        this._onSetHeader = props.onSetHeader;
        typeof (props.useModal) === "boolean" ? this._useModal = props.useModal : false;
        // Load the form
        this.load(props.itemId);
    };
    /** private static Methods */
    // Load the form information
    ItemForm.load = function (itemId) {
        var _this = this;
        // Clear the forms
        this._displayForm = null;
        this._editForm = null;
        // Show a loading dialog
        common_1.LoadingDialog.setHeader("Loading the Item");
        common_1.LoadingDialog.setBody("This will close after the form is loaded...");
        common_1.LoadingDialog.show();
        // Set the list form properties
        var listProps = {
            listName: this.ListName,
            itemId: itemId
        };
        // Call the event
        listProps = this._onGetListInfo ? this._onGetListInfo(listProps) : listProps;
        // Load the form information
        gd_sprest_bs_1.Helper.ListForm.create(listProps).then(function (info) {
            // Save the form information
            _this._info = info;
            // Set the header
            (_this._useModal ? common_1.Modal : common_1.CanvasForm).setHeader('<h5 class="m-0">' + (_this._info.item ? _this._info.item.Title : "Create Item") + '</h5>');
            // Call the header event
            _this._onSetHeader ? _this._onSetHeader(_this._useModal ? common_1.Modal.HeaderElement : common_1.CanvasForm.HeaderElement) : null;
            // Render the form based on the type
            if (_this.IsDisplay) {
                var el = document.createElement("div");
                var props = {
                    el: el,
                    info: _this._info,
                    rowClassName: "mb-3"
                };
                // Call the event if it exists
                props = _this._onCreateViewForm ? _this._onCreateViewForm(props) : props;
                // Render the display form
                _this._displayForm = gd_sprest_bs_1.Components.ListForm.renderDisplayForm(props);
                /* Remove the bottom margin from the last row of the form */
                _this._displayForm.el.lastChild.classList.remove("mb-3");
                // Render the form buttons
                var elButtons = document.createElement("div");
                el.appendChild(elButtons);
                // Add styling if not using a modal
                if (!_this._useModal) {
                    elButtons.classList.add("float-end");
                    elButtons.style.padding = "1rem 0";
                }
                // Append the create/update button
                _this._useModal ? common_1.Modal.setFooter(elButtons) : el.appendChild(elButtons);
                // Call the item form button rendering event
                var formButtons = [];
                formButtons = _this._onFormButtonsRendering ? _this._onFormButtonsRendering(formButtons) : formButtons;
                // Render the form buttons
                formButtons && formButtons.length > 0 ? gd_sprest_bs_1.Components.ButtonGroup({
                    el: elButtons,
                    buttons: formButtons
                }) : null;
                // Call the footer event
                _this._onSetFooter ? _this._onSetFooter(_this._useModal ? common_1.Modal.FooterElement : elButtons) : null;
                // Update the body
                (_this._useModal ? common_1.Modal : common_1.CanvasForm).setBody(el);
            }
            else {
                var el = document.createElement("div");
                var props = {
                    el: el,
                    info: _this._info,
                    rowClassName: "mb-3",
                    controlMode: _this.IsNew ? gd_sprest_bs_1.SPTypes.ControlMode.New : gd_sprest_bs_1.SPTypes.ControlMode.Edit
                };
                // Call the event if it exists
                props = _this._onCreateEditForm ? _this._onCreateEditForm(props) : props;
                // Render the edit form
                _this._editForm = gd_sprest_bs_1.Components.ListForm.renderEditForm(props);
                /* Remove the bottom margin from the last row of the form */
                _this._editForm.el.lastChild.classList.remove("mb-3");
                // Render the form buttons
                var elButtons = document.createElement("div");
                // Add styling if not using a modal
                if (!_this._useModal) {
                    elButtons.classList.add("float-end");
                    elButtons.style.padding = "1rem 0";
                }
                // Append the create/update button
                _this._useModal ? common_1.Modal.setFooter(elButtons) : el.appendChild(elButtons);
                // Call the item form button rendering event
                var formButtons = [{
                        text: _this.IsNew ? "Create" : "Update",
                        type: gd_sprest_bs_1.Components.ButtonTypes.OutlinePrimary,
                        onClick: function () { _this.save(_this._editForm); }
                    }];
                formButtons = _this._onFormButtonsRendering ? _this._onFormButtonsRendering(formButtons) : formButtons;
                // Render the form buttons
                formButtons && formButtons.length > 0 ? gd_sprest_bs_1.Components.ButtonGroup({
                    el: elButtons,
                    buttons: formButtons
                }) : null;
                // Call the footer event
                _this._onSetFooter ? _this._onSetFooter(_this._useModal ? common_1.Modal.FooterElement : elButtons) : null;
                // Update the body
                (_this._useModal ? common_1.Modal : common_1.CanvasForm).setBody(el);
            }
            // Close the dialog
            common_1.LoadingDialog.hide();
            // Show the form
            (_this._useModal ? common_1.Modal : common_1.CanvasForm).show();
        });
    };
    // Saves the form
    ItemForm.save = function (form) {
        var _this = this;
        // Validate the form
        this.validate(form).then(
        // Success
        function () {
            // Display a loading dialog
            common_1.LoadingDialog.setHeader("Saving the Item");
            common_1.LoadingDialog.setBody((_this.IsNew ? "Creating" : "Updating") + " the Item");
            common_1.LoadingDialog.show();
            // Saves the item
            var saveItem = function (values) {
                // Save the item
                gd_sprest_bs_1.Components.ListForm.saveItem(_this._info, values).then(function (item) {
                    // Call the update event
                    _this._updateEvent ? _this._updateEvent(item) : null;
                    // Close the dialogs
                    (_this._useModal ? common_1.Modal : common_1.CanvasForm).hide();
                    common_1.LoadingDialog.hide();
                });
            };
            // Call the save event
            var values = form.getValues();
            values = _this._onSave ? _this._onSave(values) : values;
            // See if the onSave event returned a promise
            if (values && typeof (values.then) === "function") {
                // Wait for the promise to complete
                values.then(function (values) {
                    // Save the item
                    saveItem(values);
                });
            }
            else {
                // Save the item
                saveItem(values);
            }
        }, 
        // Error
        function () {
            // Do Nothing
        });
    };
    // Validates the form
    ItemForm.validate = function (form) {
        var _this = this;
        // Return a promise
        return new Promise(function (resolve, reject) {
            var isValid = form.isValid();
            // Display a loading dialog
            common_1.LoadingDialog.setHeader("Validation");
            common_1.LoadingDialog.setBody("Validating the form...");
            common_1.LoadingDialog.show();
            // Ensure it's valid
            if (!isValid) {
                // Close the dialog
                common_1.LoadingDialog.hide();
                // Reject the request
                reject();
                return;
            }
            // Call the validation event
            var returnVal = _this._onValidation ? _this._onValidation(form.getValues()) : null;
            if (returnVal && typeof (returnVal.then) === "function") {
                // Wait for the promise to complete
                returnVal.then(function (isValid) {
                    // Close the dialog
                    common_1.LoadingDialog.hide();
                    // Resolve the request
                    isValid ? resolve() : reject();
                });
            }
            else {
                if (typeof (returnVal) === "boolean") {
                    // Update the flag
                    isValid = returnVal;
                }
                // Close the dialog
                common_1.LoadingDialog.hide();
                // Resolve the request
                isValid ? resolve() : reject();
            }
        });
    };
    ItemForm._onCreateEditForm = null;
    ItemForm._onCreateViewForm = null;
    ItemForm._onFormButtonsRendering = null;
    ItemForm._onGetListInfo = null;
    ItemForm._onSetFooter = null;
    ItemForm._onSetHeader = null;
    ItemForm._onSave = null;
    ItemForm._onValidation = null;
    ItemForm._updateEvent = null;
    // Display Form
    ItemForm._displayForm = null;
    // Edit Form
    ItemForm._editForm = null;
    // Form Information
    ItemForm._info = null;
    // Form Modes
    ItemForm._controlMode = null;
    // List name
    ItemForm._listName = null;
    // Flag to use a modal or canvas (default)
    ItemForm._useModal = false;
    return ItemForm;
}());
exports.ItemForm = ItemForm;
