"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CanvasForm = void 0;
var gd_sprest_bs_1 = require("gd-sprest-bs");
/**
 * Canvas Form
 */
var CanvasForm = /** @class */ (function () {
    // Constructor
    function CanvasForm() {
        // Render the canvas
        CanvasForm.render();
    }
    Object.defineProperty(CanvasForm, "BodyElement", {
        get: function () { return this._elBody; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CanvasForm, "HeaderElement", {
        get: function () { return this._elHeader; },
        enumerable: false,
        configurable: true
    });
    // Clears the canvas form
    CanvasForm.clear = function () {
        // Clear the header and body
        this.setHeader("");
        this.setBody("");
    };
    Object.defineProperty(CanvasForm, "el", {
        // Element
        get: function () { return this._canvas.el; },
        enumerable: false,
        configurable: true
    });
    // Hides the canvas
    CanvasForm.hide = function () { this._canvas.hide(); };
    // Renders the canvas
    CanvasForm.render = function () {
        var _this = this;
        // Create the element
        var el = document.createElement("div");
        el.id = "core-canvas";
        // Ensure the body exists
        if (document.body) {
            // Append the element
            document.body.appendChild(el);
        }
        else {
            // Create an event
            window.addEventListener("load", function () {
                // Append the element
                document.body.appendChild(el);
            });
        }
        // Render the canvas
        this._canvas = gd_sprest_bs_1.Components.Offcanvas({
            el: el,
            options: {
                autoClose: true,
                backdrop: true,
                focus: true,
                keyboard: true,
                scroll: true
            },
            onRenderBody: function (el) { _this._elBody = el; },
            onRenderHeader: function (el) { _this._elHeader = el; }
        });
    };
    // Sets the auto close flag
    CanvasForm.setAutoClose = function (value) { this._canvas.setAutoClose(value); };
    // Sets the body
    CanvasForm.setBody = function (content) {
        // Clear the body
        while (this._elBody.firstChild) {
            this._elBody.removeChild(this._elBody.firstChild);
        }
        // See if content exists
        if (content) {
            // See if this is text
            if (typeof (content) == "string") {
                // Set the html
                this._elBody.innerHTML = content;
            }
            else {
                // Append the element
                this._elBody.appendChild(content);
            }
        }
    };
    // Sets the header
    CanvasForm.setHeader = function (content) {
        // Clear the body
        while (this._elHeader.firstChild) {
            this._elHeader.removeChild(this._elHeader.firstChild);
        }
        // See if content exists
        if (content) {
            // See if this is text
            if (typeof (content) == "string") {
                // Set the html
                this._elHeader.innerHTML = content;
            }
            else {
                // Append the element
                this._elHeader.appendChild(content);
            }
        }
    };
    // Sets the modal type
    CanvasForm.setType = function (type) { this._canvas.setType(type); };
    // Shows the canvas
    CanvasForm.show = function () { this._canvas.show(); };
    CanvasForm._canvas = null;
    // Modal Body
    CanvasForm._elBody = null;
    // Modal Header
    CanvasForm._elHeader = null;
    return CanvasForm;
}());
exports.CanvasForm = CanvasForm;
// Create an instance of the canvas form
new CanvasForm();
