"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileExt = exports.formatTimeValue = exports.formatDateValue = exports.formatBytes = void 0;
var moment = require("moment");
// Formats file size into human readable form
var formatBytes = function (bytes, decimals) {
    if (decimals === void 0) { decimals = 2; }
    if (bytes === 0)
        return '0 Bytes';
    var k = 1024;
    var dm = decimals < 0 ? 0 : decimals;
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    var i = Math.floor(Math.log(bytes) / Math.log(k));
    // Return the formatted size string
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
};
exports.formatBytes = formatBytes;
// Formats the date value
var formatDateValue = function (value, format) {
    if (format === void 0) { format = "MM/DD/YYYY"; }
    // Ensure a value exists
    if (value) {
        // Return the date value
        return moment(value).format(format);
    }
    // Return nothing
    return "";
};
exports.formatDateValue = formatDateValue;
// Formats the time value
var formatTimeValue = function (value, format) {
    if (format === void 0) { format = "MM/DD/YYYY HH:mm:ss"; }
    // Ensure a value exists
    if (value) {
        // Return the date value
        return moment(value).format(format);
    }
    // Return nothing
    return "";
};
exports.formatTimeValue = formatTimeValue;
// Returns the extension of a file name
var getFileExt = function (fileName) {
    if (fileName === void 0) { fileName = ""; }
    var extension = fileName.split('.');
    return extension[extension.length - 1].toLowerCase();
};
exports.getFileExt = getFileExt;
